install.packages("caret")
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
install.packages("AppliedPredictiveModeling")
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
?createDataPartition
training = segmentationOriginal[, Case=Train]
training = segmentationOriginal[, Case==Train]
View(segmentationOriginal)
View(segmentationOriginal)
View(segmentationOriginal)
training = segmentationOriginal[, segmentationOriginal$Case==Train]
training = segmentationOriginal[, segmentationOriginal$Case=='Train']
training = segmentationOriginal[segmentationOriginal$Case=='Train',]
testing = segmentationOriginal[segmentationOriginal$Case=='Test',]
set_seed(125)
setSeed(125)
set.seed(125)
modFit = train(Class ~ .,method="rpart",data=training)
install.packages("e1071")
modFit = train(Class ~ .,method="rpart",data=training)
library(rattle)
install.packages("rattle")
fancyRpartPlot(modFit$finalModel)
modFit$finalModel
library(pgmm)
data(olive)
olive = olive[,-1]
install.packages("pgmm")
library(pgmm)
data(olive)
olive = olive[,-1]
training = olive
View(training)
modFit <- train(Area ~ ., method="rpart",method="rpart",data=training)
modFit <- train(Area ~ ., method="rpart",data=training)
modFit$finalModel
newdata = as.data.frame(t(colMeans(olive)))
predict(modFit$finalModel,newdata=newdata)
?rpart
fit <- rpart(Area ~ ., data=olive)
text(fit)
fit
?tree
newdata
?predict
predict(fit,newdata=newdata)
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
View(testSA)
View(trainSA)
source('~/.active-rstudio-document', echo=TRUE)
modFit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl)
modFit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, method="glm", family='binomial')
modFit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data=trainSA, method="glm", family='binomial')
modFit$finalModel
confusionMatrix(testSA$chd,predict(modFit$finalModel,testSA))
confusionMatrix(testSA$chd,predict(modFit$finalModel,newdata=testSA))
confusionMatrix(testSA$chd,predict(modFit,newdata=testSA))
predict(modFit,testSA)
testSA$chd
modFit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data=trainSA, method="glm", family="binomial")
confusionMatrix(testSA$chd,predict(modFit,testSA))
pred = predict(modfit,testSA)
pred = predict(modFit,testSA)
predFac <- pred > 0.5
predA <- as.factor(predFac)
predA[predA == 2] = 0
predA <- as.int(predFac)
predA <- as.integer(predFac)
confusionMatrix(testSA$chd,predA)
predT <- predict(modFit,trainSA)
predFac <- predT > 0.5
predA <- as.integer(predFac)
confusionMatrix(trainSA$chd,predA)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train
vowel.test
View(vowel.train)
modFit <- train(y~.,data=vowel.train,method="rf",prox=TRUE)
?randomForest()
modFit <- randomForest(y~., data=vowel.train)
?varImp
varImp(modFit)
modFit <- randomForest(y~., data=vowel.train)
varImp(modFit)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
set.seed(33833)
modFit <- randomForest(y~., data=vowel.train)
varImp(modFit)
varImp(modFit,scale=FALSE)
install.packages("party")
library("caret", lib.loc="~/R/win-library/3.1")
library("ElemStatLearn", lib.loc="~/R/win-library/3.1")
library("party", lib.loc="~/R/win-library/3.1")
library("randomForest", lib.loc="~/R/win-library/3.1")
varImp(modFit,scale=FALSE)
?varImp
varImp(modFit,useModel='rf,scale=FALSE)
.
)
''
''
varImp(modFit,useModel='rf',scale=FALSE)
?randomForest
modFit <- randomForest(y~., data=vowel.train,importance=TRUE)
varImp(modFit,scale=FALSE)
setwd("~/Rhome/PMLProj")
library(caret);
## Loading and cleaning Data
set.seed(24601)
# load data cleaning NAs
trainingLoad <- read.csv("pml-training.csv",na.strings=c("NA","#DIV/0!",""))
testingLoad <- read.csv("pml-testing.csv",na.strings=c("NA","#DIV/0!",""))
# survey data
summary(trainingLoad)
describe(trainingLoad)
# eliminate NA data
NAs <- apply(trainingLoad,2,function(x) {sum(is.na(x))})
training <- trainingLoad[,which(NAs == 0)]
testing <- testingLoad[,which(NAs == 0)]
# force useful columns to numeric
twnums <- training
for(i in c(8:ncol(twnums)-1)) {twnums[,i] = as.numeric(as.character(twnums[,i]))}
tstnums <- testing
for(i in c(8:ncol(tstnums)-1)) {tstnums[,i] = as.numeric(as.character(tstnums[,i]))}
# remove non useful features
goodfeats <- colnames(twnums[colSums(is.na(twnums)) == 0])[-(1:7)]
featureset <- twnums[goodfeats]
goodfeats <- colnames(tstnums[colSums(is.na(tstnums)) == 0])[-(1:7)]
featuretest <- tstnums[goodfeats]
## Building data sets for training and cross validation.
### Using 75% for training and 25% for Cross Validation.
trgroup <- createDataPartition(y = featureset$classe, p=0.75,list=FALSE)
trainset <- featureset[trgroup,]
cvset <- featureset[-trgroup,]
## Training...
trCon = trainControl(method = "cv", number = 5)
modelFit <- train(classe ~ ., trControl=trCon, method="rf", data=trainset)
modelFit
## Calculation the errors using the Cross Validation Set.
cvrun <- predict(modelFit, cvset)
cvsamperr <- sum(cvrun == cvset$classe)/nrow(cvset)
## Generating data for the prediction vector for the Assigment Submission
answers <- predict(modelFit, testing)
View(trainset)
View(vowel.test)
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
pml_write_files(answers)
?describe
??describe
install.packages("psych")
library("psych", lib.loc="~/R/win-library/3.1")
describe(training)
sapply(training,classe)
sapply(training,class)
str(training)
summary(training)
